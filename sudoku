# THREE GOLD STARS

# Sudoku [http://en.wikipedia.org/wiki/Sudoku]
# is a logic puzzle where a game
# is defined by a partially filled
# 9 x 9 square of digits where each square
# contains one of the digits 1,2,3,4,5,6,7,8,9.
# For this question we will generalize
# and simplify the game.

# Define a procedure, check_sudoku,
# that takes as input a square list
# of lists representing an n x n
# sudoku puzzle solution and returns the boolean
# True if the input is a valid
# sudoku square and returns the boolean False
# otherwise.

# A valid sudoku square satisfies these
# two properties:

#   1. Each column of the square contains
#       each of the whole numbers from 1 to n exactly once.

#   2. Each row of the square contains each
#       of the whole numbers from 1 to n exactly once.

# You may assume the the input is square and contains at
# least one row and column.

correct = [[1,2,3],
           [2,3,1],
           [3,1,2]]

incorrect = [[1,2,3,4],
             [2,3,1,3],
             [3,1,2,3],
             [4,4,4,4]]

incorrect2 = [[1,2,3,4],
             [2,3,1,4],
             [4,1,2,3],
             [3,4,1,2]]

incorrect3 = [[1,2,3,4,5],
              [2,3,1,5,6],
              [4,5,2,1,3],
              [3,4,5,2,1],
              [5,6,4,3,2]]

incorrect4 = [['a','b','c'],
              ['b','c','a'],
              ['c','a','b']]

incorrect5 = [ [1, 1.5],
               [1.5, 1]]
               
             
correct2 = [[1,2,3,4],
            [2,4,1,3], 
            [3,1,4,2], 
            [4,3,2,1]]
correct3 = [[1]]
correct4 = [[1,2], [2,1]]
def is_number(num):
    k = ''
    for t in num:
        for f in t:
            k = k + str(f) 
            m = k.isdigit()
    return m
def veri(num):
    f = len(num)
    o = 0
    q = 0
    for n in num:
        f = f - 1
        o = o + 1
        q = q + o 
    return q

def suma_columna(num):
    b = []
    c = 1
    j = veri(num)
    l = 0
    for n in num:
        l = l + 1
        b = b + [n[len(num) - c]]
    return sum(b) == j
def suma_fila(num):
    b = 0
    p = []
    o = 0
    for n in num:
        b = b + 1
        p = p + n
    return p.count(b) == b
            
def check_sudoku(num):
    s = []
    o = len(num)- 1
    cont = 0
    for n in num:
        s = s + n
        if is_number(num):
            if suma_columna(num):
                if suma_fila(num):
                    return True
    return False
print check_sudoku(incorrect)
#>>> False

print check_sudoku(correct)
#>>> True

print check_sudoku(incorrect2)
#>>> False

print check_sudoku(incorrect3)
#>>> False

print check_sudoku(incorrect4)
#>>> False

print check_sudoku(incorrect5)
#>>> False
print check_sudoku(correct2)
print check_sudoku(correct4) 
print check_sudoku(correct3)
print veri(correct4)
print suma_columna(incorrect2)
